package com.example.Aisian.Cuisine.service;

import com.example.Aisian.Cuisine.dto.*;
import com.example.Aisian.Cuisine.model.Order;
import com.example.Aisian.Cuisine.model.OrderItem;
import com.example.Aisian.Cuisine.model.Product;
import com.example.Aisian.Cuisine.repository.OrderItemRepository;
import com.example.Aisian.Cuisine.repository.OrderRepository;
import com.example.Aisian.Cuisine.repository.ProductRepository;

import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.List;
import java.util.Optional;

@Service
public class CartServiceImpl implements CartService {

    @Autowired
    private OrderRepository orderRepository;

    @Autowired
    private OrderItemRepository orderItemRepository;

    @Autowired
    private ProductRepository productRepository;

    @Override
    public void addToCart(Long userId, CartRequestDTO request) {
        // 1. T√¨m ƒë∆°n h√†ng 'pending' c·ªßa user
        Optional<Order> optionalOrder = orderRepository.findByUserIdAndStatus(userId, "pending");
        Order order;

        if (optionalOrder.isPresent()) {
            order = optionalOrder.get();
        } else {
            // N·∫øu ch∆∞a c√≥, t·∫°o ƒë∆°n m·ªõi
            order = new Order();
            order.setUserId(userId);
            order.setStatus("pending");
            order.setTotal(BigDecimal.ZERO); // Ban ƒë·∫ßu total l√† 0
            orderRepository.save(order);
        }

        // 2. L·∫•y th√¥ng tin s·∫£n ph·∫©m
        Product product = productRepository.findById(request.getProductId())
                .orElseThrow(() -> new RuntimeException("Product not found"));

        // 3. Ki·ªÉm tra xem s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè ch∆∞a
        Optional<OrderItem> optionalItem = orderItemRepository.findByOrderIdAndProductId(order.getId(), request.getProductId());

        if (optionalItem.isPresent()) {
            // N·∫øu ƒë√£ c√≥ th√¨ tƒÉng s·ªë l∆∞·ª£ng
            OrderItem item = optionalItem.get();
            item.setQuantity(item.getQuantity() + request.getQuantity());
            orderItemRepository.save(item);
        } else {
            // N·∫øu ch∆∞a c√≥ th√¨ th√™m m·ªõi
            OrderItem item = new OrderItem();
            item.setOrder(order);
            item.setProduct(product);
            item.setQuantity(request.getQuantity());
            item.setPrice(product.getPrice());
            orderItemRepository.save(item);
        }

        // 4. C·∫≠p nh·∫≠t l·∫°i total
        BigDecimal currentTotal = orderItemRepository.calculateTotalByOrderId(order.getId());
        order.setTotal(currentTotal);
        orderRepository.save(order);
    }


    @Override
    public void updateCart(Long userId, CartUpdateRequestDTO request) {
        Order order = orderRepository.findByUserIdAndStatus(userId, "pending")
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng"));

        OrderItem item = orderItemRepository.findByOrderIdAndProductId(order.getId(), request.getProductId())
                .orElseThrow(() -> new RuntimeException("S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i trong gi·ªè"));

        if (request.getQuantity() <= 0) {
            orderItemRepository.delete(item);
        } else {
            item.setQuantity(request.getQuantity());

            // ‚úÖ X·ª≠ l√Ω gi√° tr·ªã null c·ªßa note
            String receivedNote = request.getNote();
            if (receivedNote == null) {
                receivedNote = "";  // N·∫øu kh√¥ng c√≥ ghi ch√∫, ƒë·∫∑t gi√° tr·ªã m·∫∑c ƒë·ªãnh l√† chu·ªói r·ªóng
            }

            // ‚úÖ Log ki·ªÉm tra xem backend c√≥ nh·∫≠n ƒë∆∞·ª£c note hay kh√¥ng
            System.out.println("üì• Note nh·∫≠n ƒë∆∞·ª£c t·ª´ API: '" + receivedNote + "'");

            item.setNote(receivedNote);
            System.out.println("üì• Note ƒë√£ ƒë∆∞·ª£c g√°n v√†o OrderItem: '" + item.getNote() + "'");

            // üî• L∆∞u v√†o database
            orderItemRepository.save(item);
            System.out.println("‚úÖ OrderItem ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!");
        }

        // ‚úÖ C·∫≠p nh·∫≠t l·∫°i t·ªïng gi√° c·ªßa ƒë∆°n h√†ng
        BigDecimal newTotal = orderItemRepository.calculateTotalByOrderId(order.getId());
        order.setTotal(newTotal != null ? newTotal : BigDecimal.ZERO);
        orderRepository.save(order);
    }



    @Override
    public void removeItem(Long userId, Long productId) {
        // 1. T√¨m ƒë∆°n h√†ng 'pending' c·ªßa user
        Order order = orderRepository.findByUserIdAndStatus(userId, "pending")
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng"));

        // 2. T√¨m item trong gi·ªè
        OrderItem item = orderItemRepository.findByOrderIdAndProductId(order.getId(), productId)
                .orElseThrow(() -> new RuntimeException("S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i trong gi·ªè"));

        // 3. X√≥a item
        orderItemRepository.delete(item);

        // 4. C·∫≠p nh·∫≠t l·∫°i total
        BigDecimal newTotal = orderItemRepository.calculateTotalByOrderId(order.getId());
        order.setTotal(newTotal != null ? newTotal : BigDecimal.ZERO);
        orderRepository.save(order);
    }

    @Override
    public CartResponseDTO getCart(Long userId) {
        // L·∫•y order c√≥ status "pending" cho user
        Order order = orderRepository.findByUserIdAndStatus(userId, "pending")
                .orElseThrow(() -> new RuntimeException("Gi·ªè h√†ng tr·ªëng"));

        // L·∫•y t·∫•t c·∫£ c√°c OrderItem t·ª´ order
        List<OrderItem> items = orderItemRepository.findByOrderId(order.getId());

        // Chuy·ªÉn c√°c OrderItem th√†nh CartItemResponseDTO
        List<CartItemResponseDTO> itemDTOs = items.stream().map(item -> {
            Product product = item.getProduct();
            BigDecimal subtotal = product.getPrice().multiply(BigDecimal.valueOf(item.getQuantity()));

            // ‚úÖ Thay ƒë·ªïi: N·∫øu item.getNote() l√† null, th√¨ tr·∫£ v·ªÅ chu·ªói r·ªóng ""
            String note = item.getNote() != null ? item.getNote() : "";

            return new CartItemResponseDTO(
                    product.getId(),
                    product.getName(),
                    product.getMainImg(),
                    product.getPrice(),
                    item.getQuantity(),
                    subtotal,
                    note // ‚úÖ G·ª≠i note kh√¥ng bao gi·ªù l√† null
            );
        }).toList();

        // Tr·∫£ v·ªÅ danh s√°ch c√°c m√≥n trong gi·ªè h√†ng v√† t·ªïng gi√°
        return new CartResponseDTO(itemDTOs, order.getTotal());
    }

    @Override
    @Transactional
    public void checkout(Long userId, CheckoutRequestDTO request) {
        // 1. T√¨m ƒë∆°n h√†ng ƒëang ch·ªù (pending)
        Order order = orderRepository.findByUserIdAndStatus(userId, "pending")
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng ƒëang ch·ªù thanh to√°n."));

        // 2. C·∫≠p nh·∫≠t th√¥ng tin ƒë∆°n h√†ng t·ª´ request
        order.setAddress(request.getAddress());
        order.setAddressNote(request.getAddressNote());
        order.setPhoneNumber(request.getPhoneNumber());
        order.setVoucherCode(request.getVoucherCode());

        // 3. L·∫•y t·∫•t c·∫£ OrderItem thu·ªôc v·ªÅ Order n√†y
        List<OrderItem> orderItems = orderItemRepository.findByOrderId(order.getId());

        // 4. C·∫≠p nh·∫≠t note cho t·ª´ng m√≥n trong Order
        for (OrderItem orderItem : orderItems) {
            // T√¨m `note` t∆∞∆°ng ·ª©ng t·ª´ request
            for (CheckoutItemDTO itemDTO : request.getItems()) {
                if (orderItem.getProduct().getId().equals(itemDTO.getProductId())) {
                    orderItem.setNote(itemDTO.getNote()); // ‚úÖ C·∫≠p nh·∫≠t note
                    orderItemRepository.save(orderItem); // ‚úÖ L∆∞u thay ƒë·ªïi v√†o database
                    System.out.println("‚úÖ ƒê√£ l∆∞u note cho s·∫£n ph·∫©m: " + orderItem.getProduct().getName() + " - Note: " + orderItem.getNote());
                    break;
                }
            }
        }

        // 5. C·∫≠p nh·∫≠t tr·∫°ng th√°i v√† th·ªùi gian ƒë·∫∑t
        order.setStatus("paid");
        order.setCreatedAt(new Timestamp(System.currentTimeMillis())); // c·∫≠p nh·∫≠t th·ªùi gian thanh to√°n

        // 6. L∆∞u l·∫°i ƒë∆°n h√†ng
        orderRepository.save(order);
    }



}
