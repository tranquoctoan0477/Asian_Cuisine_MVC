package com.example.Aisian.Cuisine.service;

import com.example.Aisian.Cuisine.model.User;
import com.example.Aisian.Cuisine.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.Optional;
import java.util.Random;
import java.util.concurrent.ConcurrentHashMap;

@Service
public class ResetPasswordService {

    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;

    // Gi·∫£ l·∫≠p kho l∆∞u OTP (c√≥ th·ªÉ thay b·∫±ng Redis n·∫øu c·∫ßn)
    private final ConcurrentHashMap<String, String> otpStorage = new ConcurrentHashMap<>();

    @Autowired
    public ResetPasswordService(UserRepository userRepository, PasswordEncoder passwordEncoder) {
        this.userRepository = userRepository;
        this.passwordEncoder = passwordEncoder;
    }


    public boolean sendOtpToPhone(String phoneNumber) {
        // üëâ Ki·ªÉm tra xem s·ªë ƒëi·ªán tho·∫°i c√≥ t·ªìn t·∫°i kh√¥ng
        Optional<User> optionalUser = userRepository.findByPhone(phoneNumber);
        if (optionalUser.isEmpty()) {
            return false; // Kh√¥ng g·ª≠i OTP n·∫øu kh√¥ng c√≥ ng∆∞·ªùi d√πng
        }

        // ‚úÖ Sinh m√£ OTP 6 ch·ªØ s·ªë
        String otp = generateOtp();

        // TODO: G·ª≠i OTP b·∫±ng SMS th·∫≠t s·ª± (Twilio, Firebase,...)
        System.out.println("‚úÖ [OTP MOCK] G·ª≠i OTP " + otp + " ƒë·∫øn s·ªë: " + phoneNumber);

        // L∆∞u OTP t·∫°m th·ªùi
        otpStorage.put(phoneNumber, otp);

        return true;
    }


    // X√°c minh OTP
    public boolean verifyOtp(String phoneNumber, String otp) {
        String storedOtp = otpStorage.get(phoneNumber);
        return storedOtp != null && storedOtp.equals(otp);
    }

    // ƒê·ªïi m·∫≠t kh·∫©u sau khi x√°c minh OTP
    public boolean updatePassword(String phoneNumber, String newPassword) {
        Optional<User> optionalUser = userRepository.findByPhone(phoneNumber); // ‚Üê CH·ªàNH ƒê√öNG T√äN
        if (optionalUser.isPresent()) {
            User user = optionalUser.get();
            String hashed = passwordEncoder.encode(newPassword);
            user.setPassword(hashed);
            userRepository.save(user);
            return true;
        }
        return false;
    }

    // Sinh OTP ng·∫´u nhi√™n 6 ch·ªØ s·ªë
    private String generateOtp() {
        Random random = new Random();
        int otp = 100000 + random.nextInt(900000);
        return String.valueOf(otp);
    }
}
